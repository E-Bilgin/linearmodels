# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

parameters:
  # defaults for any parameters that are not specified
  name: ''
  vmImage: ''


jobs:

- job: ${{ parameters.name }}Test
  pool:
    vmImage: ${{ parameters.vmImage }}
  strategy:
    matrix:
      python37_legacy:
        python.version: '3.7'
        NUMPY: 1.17.5
        SCIPY: 1.3.3
        PANDAS: 0.25.3
        STATSMODELS: 0.10.2
        XARRAY: 0.13
      python38_mid:
        python.version: '3.8'
        NUMPY: 1.18.5
        SCIPY: 1.4.1
        PANDAS: 1.0.5
        STATSMODELS: 0.11.1
        XARRAY: 0.14.1
      python39_latest:
        python.version: '3.9'
    maxParallel: 10

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
    displayName: 'Use Python $(python.version)'

  - script: |
      python -m pip install --upgrade pip setuptools wheel
      source ci/install-posix.sh
      python -m pip install -r requirements.txt
      python -m pip install -r requirements-test.txt
      python -m pip install -r requirements-dev.txt
      jupyter kernelspec list
    displayName: 'Install dependencies'

  - script: |
     flake8 linearmodels
     black --check linearmodels
     isort --check linearmodels
    displayName: 'Check style and formatting'

  - script: |
      python -m pip list
    displayName: 'List Configuration'

  - script: |
      python -m pip install -e . -v --no-build-isolation
    displayName: 'Install linearmodels'

  - script: |
      pytest linearmodels --junitxml=junit/test-results.xml -n auto --durations=25
    displayName: 'pytest'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()
